# -*- coding: utf-8 -*-
"""잠재요인기반_협업_필터링.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16XBaa6rrzNIIIn8mxXLuTlvjE9hs_h1L

##### ✅ ratings.csv -> user가 와인에 평가를 매긴 데이터
- userId
- wineId
- rating
  - 검색하기 (1점)
  - 클릭하기 (2점)
  - 저장하기 (3점)
  - 평가하기 (4점)
    - '그냥그래요' 선택 시 0점 기록 
    - ‘별로에요’ 선택 시 -1점 기록


##### ✅ wines.csv -> 와인정보 데이터
- wineImage
- wineName
- wineNameEng
- wineType
- winePrice
- wineSweet
- wineBody
- wineVariety
- aroma1,aroma2,aroma3

### 아이템기반 + 잠재요인 기반 협업 필터링을 위한 작업
"""

import pandas as pd
import numpy as np
import numpy as np

#데이터 준비
rating_data = pd.read_csv('./ratings.csv')
wine_data = pd.read_csv('./wines.csv')

rating_data.head()

wine_data.head()

#필요없는 컬럼삭제 (axis=1(좌우))
#rating_data.drop('컬럼명 이름을 적어주세요', axis=1, inplace=True)
wine_data.drop('종류', axis=1, inplace=True)

wine_data.head()

#와인데이터와 평점데이터를 머지
#merge : 고유값(key)을 기준으로 병합. on을 기준으로 병합. 
user_wine_data = pd.merge(rating_data, wine_data, on='이름')

user_wine_data.head()

# 피봇테이블 생성
# 와인-사용자 피봇테이블 (index=wineId, column:userId)
wine_user_pivot = user_wine_data.pivot_table('rating', index='이름', columns='userId')

wine_user_pivot.head()

#평점을 매기지 않은 데이터는 NaN으로 나옴 -> 0으로 처리
wine_user_pivot = wine_user_pivot.fillna(0)
wine_user_pivot.head()

wine_user_pivot.shape

"""## 잠재요인 기반 협업 필터링
- 잠재요인 -> 특정와인으로 지정
- 특정와인과 비슷한 와인을 추천해줌
"""

### SVD(특이값 분해)
from sklearn.decomposition import TruncatedSVD

#latent 값을 12로 둠
#n_component= 12 : 특이값을 12로 잡고 fit_transform으로 변환하게 되면 전체 n개의 와인데이터가 12개의 어떤 요소의 값을 가짐
SVD = TruncatedSVD(n_components=3)
matrix = SVD.fit_transform(wine_user_pivot)
matrix.shape

matrix[0]

#데이터끼리 피어슨 상관계수를 통해 상관계수를 구해줌
#'특정 와인'과 관련하여 상관계수가 높은 것들을 구해주는 방법
corr = np.corrcoef(matrix)
corr.shape

"""### 영화추천 사용자 함수 생성
- 사용자가 어떤 와인에 대한 추천을 받을 때, 상관계수 값이 0.9 이상인 영화를 추천해준다
"""

wine_name = wine_user_pivot.index
wine_name_list = list(wine_name)

def recommend_wine(name):
  target = wine_name_list.index(name)
  corr_target = corr[target] #상관계수값
  result = list(wine_name[(corr_target >= 0.1)])[:50] #상관계수값이 0.9이상인 영화만 추천

  return result

recommend_wine('예쁜 와인')
